// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#ifndef GT_LIGHTING_UNREAL
#define GT_LIGHTING_UNREAL

#include "Common/GTLighting.ush"

// Based on Engine/Shaders/Private/ReflectionEnvironmentShared.ush GetSkySHDiffuse
Half3 GTGetSkySHDiffuse(Half3 Normal)
{
    Half4 NormalVector = Half4(Normal, Half(1));

    Half3 Result;
	Result.x = dot(View.SkyIrradianceEnvironmentMap[0], NormalVector);
	Result.y = dot(View.SkyIrradianceEnvironmentMap[1], NormalVector);
	Result.z = dot(View.SkyIrradianceEnvironmentMap[2], NormalVector);

    // Max to avoid negative colors.
	return max(Half3(0, 0, 0), Result);
}

Half3 GTContributionDefaultLit(FMaterialPixelParameters Parameters,
                               float3 BaseColor,
                               float Metallic,
                               float Specular,
                               float Roughness,
                               float3 Normal,
                               float AmbientOcclusion,
                               TextureCube ReflectionCube,
                               SamplerState ReflectionCubeSampler,
                               float DirectLightIntensity,
                               float4 DirectionalLightDirectionEnabled,
                               float4 DirectionalLightColorIntensity)
{
    Half RoughnessSq = clamp(Roughness * Roughness, GT_MIN_N_DOT_V, Half(1));

    Half3 Result = Half3(0, 0, 0);

#if !GT_FULLY_ROUGH
#if GT_ENABLE_SH
    // Indirect (spherical harmonics)
    Half3 SkySHDiffuse = GTGetSkySHDiffuse(Normal);
    Result += GTContributionSH(BaseColor,
                               Metallic,
                               Roughness,
                               SkySHDiffuse,
                               ResolvedView.SkyLightColor.rgb);
#endif // GT_ENABLE_SH

    // Indirect (reflection cube).
    Result += GTContributionReflection(BaseColor,
                                       RoughnessSq,
                                       ReflectionCube,
                                       ReflectionCubeSampler,
                                       Parameters.ReflectionVector * Parameters.TwoSidedSign);
#else
	// Ensure fully rough materials aren't fully black.
    Result += BaseColor * Half(0.025);
#endif // GT_FULLY_ROUGH

    // Direct (directional light).
    Result += GTContributionDirectionalLight(BaseColor,
                                             Metallic,
                                             Roughness,
                                             RoughnessSq,
                                             Specular,
                                             Normal,
                                             Parameters.CameraVector,
                                             DirectionalLightDirectionEnabled.xyz,
                                             DirectionalLightColorIntensity) *
                                             DirectLightIntensity *
                                             DirectionalLightDirectionEnabled.w;

    return Result * AmbientOcclusion;
}

#endif // GT_LIGHTING_UNREAL